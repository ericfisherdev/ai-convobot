name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build

      - name: Run tests
        run: npm test -- --run
        continue-on-error: true

  test-backend:
    name: Test Backend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          rustflags: ""

      - name: Setup build dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Setup build dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl

      - name: Check formatting
        run: cd backend && cargo fmt --check

      - name: Run clippy
        run: cd backend && cargo clippy --all-targets --all-features

      - name: Run tests
        run: cd backend && cargo test --verbose

      - name: Build release
        run: cd backend && cargo build --release

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Setup build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build full application
        run: npm run build-full

      - name: Test application startup
        run: |
          # Start the application in background
          timeout 30s ./backend/target/release/ai-companion &
          APP_PID=$!
          
          # Wait for startup
          sleep 10
          
          # Test if application responds
          curl -f http://localhost:3000/ || exit 1
          
          # Clean shutdown
          kill $APP_PID 2>/dev/null || true
          wait $APP_PID 2>/dev/null || true
          
          echo "Integration test passed!"